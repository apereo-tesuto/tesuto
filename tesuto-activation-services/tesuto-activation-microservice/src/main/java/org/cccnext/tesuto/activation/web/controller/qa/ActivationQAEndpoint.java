/*******************************************************************************
 * Copyright Â© 2019 by California Community Colleges Chancellor's Office
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package org.cccnext.tesuto.activation.web.controller.qa;

import java.util.Collection;
import java.util.Date;

import org.cccnext.tesuto.activation.ActivationService;
import org.cccnext.tesuto.activation.ProtoActivation;
import org.cccnext.tesuto.activation.model.Activation;
import org.cccnext.tesuto.admin.dto.UserAccountDto;
import org.cccnext.tesuto.admin.viewdto.StudentViewDto;
import org.cccnext.tesuto.user.service.StudentReader;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping(value = "service/v1/qa")
public class ActivationQAEndpoint {

	@Autowired
	private ActivationService service;
	
	private StudentReader studentReader;

	@RequestMapping(value = "oauth2/launch/proctor/{proctor-id}/requestor/{requestor-id}", method = RequestMethod.POST, produces = "application/json")
    @PreAuthorize("hasAuthority('API')")
	public @ResponseBody String launchAssessmentSession(@RequestBody ProtoActivation proto, @PathVariable("proctor-id") String proctorId, @PathVariable("requestor-id") String requestorId) {

		String activationId = service.create(proctorId, proto);
		
		StudentViewDto student = studentReader.getStudentById(requestorId);
		UserAccountDto requestor = new UserAccountDto();
		requestor.setUserAccountId(student.getCccId());
		requestor.setUsername(student.getCccId());
		
		requestor.setFirstName(student.getFirstName());
		requestor.setLastName(student.getLastName());
		requestor.setDisplayName(student.getDisplayName());
		
		return service.launch(service.find(activationId), requestor, null);
	}

	@RequestMapping(value = "oauth2/start-date/assessment-session-id/{assessment-session-id}/{start-date}", method = RequestMethod.POST, produces = "application/json")
    @PreAuthorize("hasAuthority('API')")
	public void updateActivationStartDate(@PathVariable("assessment-session-id") String assessmentSessionId, @PathVariable("start-date") Long startDate) {
		Collection<Activation> activations = service.getDao().findActivationsByAssessmentSessionId(assessmentSessionId);
		activations.stream().forEach(act -> act.setCreateDate(new Date(startDate)));
		activations.stream().forEach(act -> service.getDao().update(act));
	}

	@RequestMapping(value = "oauth2/end-date/assessment-session-id/{assessment-session-id}", method = RequestMethod.POST, produces = "application/json")
    @PreAuthorize("hasAuthority('API')")
	public void updateActivationEndDate(@PathVariable("assessment-session-id") String assessmentSessionId) {
		Collection<Activation> activations = service.getDao().findActivationsByAssessmentSessionId(assessmentSessionId);
		DateTime date = new DateTime().plusSeconds(5);
		// So that activation is not set to Expired. Currently there is no mechanism to
		// expire a session
		// Until an update is called. Reports are generated by IN_PROGRESS after endDate
		activations.stream().forEach(act -> act.setEndDate(date.toDate()));
		activations.stream().forEach(act -> service.getDao().update(act));
	}
}
