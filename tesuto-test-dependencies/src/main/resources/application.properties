# This file can either be copied to the tomcat/lib directory so it is available on the classpath *or*
# the environment variables can be passed in the way Docker (regular system variables) are set.
# Example: export JDBC_USER=tesuto
# Database configuration
# MySQL database url
#database.url=jdbc:mysql://localhost:3306/tesuto
# Postgres database url
JDBC_URL=jdbc:postgresql://localhost:5432/tesuto
JDBC_USER=tesuto
JDBC_PASSWORD=tesuto

JDBC_URL_CONTENT=jdbc:postgresql://localhost:5432/tesuto_content
JDBC_USER_CONTENT=tesuto_content
JDBC_PASSWORD_CONTENT=tesuto_content

JDBC_URL_DELIVERY=jdbc:postgresql://localhost:5432/tesuto_delivery
JDBC_USER_DELIVERY=tesuto_delivery
JDBC_PASSWORD_DELIVERY=tesuto_delivery

JDBC_URL_ACTIVATION=jdbc:postgresql://localhost:5432/tesuto_activation
JDBC_USER_ACTIVATION=tesuto_activation
JDBC_PASSWORD_ACTIVATION=tesuto_activation

JDBC_URL_ADMIN=jdbc:postgresql://localhost:5432/tesuto_admin
JDBC_USER_ADMIN=tesuto_admin
JDBC_PASSWORD_ADMIN=tesuto_admin

JDBC_URL_REPORTS=jdbc:postgresql://localhost:5432/tesuto_reports
JDBC_USER_REPORTS=tesuto_reports
JDBC_PASSWORD_REPORTS=tesuto_reports

JDBC_URL_MESSAGE=jdbc:postgresql://localhost:5432/tesuto_delivery
JDBC_USER_MESSAGE=tesuto_delivery
JDBC_PASSWORD_MESSAGE=tesuto_delivery

JDBC_URL_PLACEMENT=jdbc:postgresql://localhost:5432/tesuto_placement
JDBC_USER_PLACEMENT=tesuto_placement
JDBC_PASSWORD_PLACEMENT=tesuto_placement

# MySQL driver class name
#database.driverClassName=com.mysql.jdbc.Driver
# Postgres driver class name
database.driverClassName=org.postgresql.Driver
#database.driverClassName=net.sf.log4jdbc.DriverSpy
database.initialPoolSize=5
database.minPoolSize=5
database.maxPoolSize=20
database.maxIdleTime=120
database.testConnectionOnCheckin=true
database.testConnectionOnCheckout=false
database.idleConnectionTestPeriod=5

# Local directory staging upload location, trailing slash is required.
upload.dir=/tmp/tesuto-uploads/

namespace.xsd.competencymap=http://static-assets.ci.tesuto.org/ASSESS/v2/competency_map_v2.xsd
namespace.xsd.competency=http://static-assets.ci.tesuto.org/ASSESS/v2/competency_v2.xsd

# If "s3" is active, the running app will access Amazon S3, otherwise, only "local" filesystem storage will be used.
# Adding "redis" will cause sessions to be managed by a Redis datastore which must be accessible, "no-redis" means normal
# http-idp means it will download the metadata.xml file dynamically so it updates on the other environments when it gets
# updated.  no-http-idp means it will use the local resource within the Asses code base.
# If "aws-queue" is active the app will attempt to use listener and publishers that access aws while,
# "local-queue" will use elasticmq for queue.
# Tomcat managed sessions will be used.
#spring.profiles.active=s3,redis,http-metadata,aws-queue
spring.profiles.active=local,redis,http-metadata,local-queue

# This only controls Redis caching.  Local ehcache needs to be tweaked in the ehcache.xml file manually. It's a good
# idea to keep these both the same.
cache.timeToLive=600

# Conditional production only flag for Google Analytics.
#google.analytics.environment=prod
google.analytics.environment=dev

# S3 Configuration
static.storage.bucket=ccc-dev-assess-resources
static.storage.local.store.directory=src/test/resources/tesuto-local-resources/
static.storage.s3.key=AKIAJFGPZMJ3CIW3QYGA
static.storage.s3.secret=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
static.storage.s3.use.roles=false

# Mongo database configuration
MONGO_DBNAME=tesuto
# this might need to be 127.0.0.1 for macs because of some weird network issue.
# localhost doesn't work on our default configs.
MONGO_HOST_1=127.0.0.1
#MONGO_HOST_1=172.17.0.2
MONGO_PORT_1=27017
MONGO_HOST_2=
#MONGO_HOST_2=172.17.0.3
MONGO_PORT_2=
#MONGO_PORT_2=27017
MONGO_HOST_3=
#MONGO_HOST_3=172.17.0.4
MONGO_PORT_3=
#MONGO_PORT_3=27017
# If you have enabled authentication on your local Mongo instance, set MONGO_USER and MONGO_PASSWORD, otherwise
# leave them blank.
MONGO_USER=tesuto
MONGO_PASSWORD=tesuto
#MONGO_USER=tesuto
#MONGO_PASSWORD=tesuto
MONGO_AUTHENTICATION_DBNAME=admin

mongo.connectionsPerHost=8
mongo.threadsAllowedToBlockForConnectionMultiplier=4
mongo.connectTimeout=1000
mongo.maxWaitTime=1500
mongo.autoConnectRetry=true
mongo.socketKeepAlive=true
mongo.socketTimeout=1500
mongo.slaveOk=truetesuto.service.host
mongo.writeNumber=1
mongo.writeTimeout=0
mongo.writeFsync=true
# Note: This value cannot be set to REPLICAS_SAFE for a single Mongo instance.
# It can only be set REPLICAS_SAFE for a Mongo Cluster.  The Docker build
# has this value set.  In order to run the docker build locally, either
# this needs to be commented out or a local cluster needs to be set up to
# run the docker image locally.
# Deprecated, but Spring Data needs to catch up!
#mongo.write-concern=REPLICAS_SAFE
mongo.write-concern=UNACKNOWLEDGEDclass.importer.validate.studentname=false

#Search Set Cache configuration
searchSet.bean=searchSetMapCache
#searchSet.bean=searchSetRedisCache
#Only need these if using redis
searchSet.prefix=SSC
searchSet.ttl=86400

#needs to be ccc-assess-redis.lixhgv.ng.0001.usw2.cache.amazonaws.com:6379 in the cloud
REDIS_HOST_NAME=localhost
REDIS_PORT=6379
redis.session.namespace=assess
redis.cache.namespace=.assessAppCache

#Preview Assessment Item Cache configuration
#assessmentItemCache.bean=assessmentItemRedisCache
assessmentItemCache.bean=assessmentItemMapCache
#Only need these if using elastiCache/Amazon
assessmentItemCache.prefix=PAC
assessmentItemCache.ttl=600
#Preview Assessment Cache configuration
#assessmentCache.bean=assessmentRedisCache
assessmentCache.bean=assessmentMapCache
#Only need these if using elastiCache/Amazon
assessmentCache.prefix=PAC
assessmentCache.ttl=600

#Preview Assessment Session Cache configuration
#assessmentSessionCache.bean=assessmentSessionRedisCache
assessmentSessionCache.bean=assessmentSessionMapCache
#Only need these if using elastiCache/Amazon
assessmentSessionCache.prefix=PAC
assessmentSessionCache.ttl=600

saml.key.manager.store.pass=nalle123
saml.key.manager.default.key.value=nalle123
saml.key.manager.default.key=apollo
saml.metadata.provider.local.on=true
saml.key.manager.keystore=classpath:security/samlKeystore.jpks
# Needs to vary per environment
#saml.metadata.provider.url=http://saml.ccctcportal.org/metadata/ccc-metadata.xml
saml.metadata.provider.url=http://saml.ccctcportal.org/metadata/ccc-metadata-unsigned.xml
saml.metadata.provider.classpath=/metadata/assess-localhost-metadata.xml
saml.metadata.provider.request.timeout.milliseconds=5000

#for local testing use: https://local-idp.ccctcportal.org:8443/idp/profile/SAML2/POST/SSO
#then navigate to this url https://ci-proxy.ccctcportal.org/simplesaml/saml2/idp/SSOService.php?source=LOCALMOCK&spentityid=ccc.sample.saml&RelayState=http://localhost:8080/saml-demo/demo/

#otherwise for ci set to https://ci-proxy.ccctcportal.org/simplesaml/saml2/idp/metadata.php
saml.metadata.provider.default.idp=https://ci-proxy.ccctcportal.org/simplesaml/saml2/idp/metadata.php

# StudentServiceTest will *not* pass with an empty URL.  There would need to be another test created to test the local
# lookup code. A different execution is caused by changing these properties.  So this code is not actually hitting the
# CI Mitre instance as it appears because a mock server for the Student Profile Service is being wired in.
# Note, trailing slash is *required*
STUDENT_PROFILE_URL=https://gateway.ci.cccmypath.org/student-profile-service/v2/users/
#STUDENT_PROFILE_URL=https://gateway.test.cccmypath.org/student-profile-service/v2/users/
#STUDENT_PROFILE_URL=tesuto.service.host

passcode.public.minExpiration=10
passcode.public.hourHand=
passcode.public.minuteHand=30
passcode.public.prefix=
passcode.public.length=6

passcode.private.minExpiration=0
passcode.private.hourHand=15
passcode.private.minuteHand=
passcode.private.prefix=PR
passcode.private.length=6

passcode.remote.prefix=RE
passcode.remote.length=6

passcode.maxFailedAttempts=5
passcode.lockedForSeconds=180

report.zip.file.password=password
report.zip.file.directory=tesuto-reports/downloaded-reports
report.directory=/tmp/tesuto_reports

#MOST LIKELY NO_ONE_ALLOWED or similar for production
report.download.roles=hasAnyRole('DEVELOPER', 'ADMIN')
report.cron.job=0 0 8 * * *
report.lower.bound.completion.date.in.days=1
report.s3.bucket.name=tesuto-dev-reports
report.response.report.s3.path=assessment/responses
report.poggio.response.report.s3.path=assessment/poggio
report.attempt.page.size=1000

# URL for external login / landing
landingPageUrl=/login

# This is a configurable timeout which may become available to users in the future to be configured per college,
# locations, or something else.  For now we just want to make sure it is available in all JSPs.
uiIdleTimeoutDuration=1170

activation.minDurationDays=7
activation.minExpirationHour=15

placement.options.english=ENGLISH,BOTH
placement.options.esl=ENGLISH,ESL,BOTH

placement.competency.select.range=4
placement.competency.select.parent.sort.level=0

# SQS Queue settingstesuto.service.host
# AWS Credentials
#cloud.aws.credentials.accessKey=AKIAJFGPZMJ3CIW3QYGA
cloud.aws.credentials.accessKey=AKIAJOTQRR6BWATQDRZA
#cloud.aws.credentials.secretKey=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
cloud.aws.credentials.secretKey=+NEYF3VtvrcqryFsfVcOJQ+RSn9IIEiC0Jkjn9dU
#cloud.aws.credentials.instanceProfile=true
#cloud.aws.region.auto=true
cloud.aws.region.static=us-west-2
cloud.aws.env=junkyard

#OAUTH FOR RULES ENGINE
oauth.clientId=tesuto_api
oauth.clientSecret=2b4af75b-a77b-45cf-baee-e316ac2f6eb6
oauth.base.url=http://localhost:8080/openid-connect-server-webapp

# Open ID settings, hits the CI Mitre instance
openid.base.endpoint=http://localhost:8080/openid-connect-server-webapp
#openid.base.endpoint=http://login.test.cccmypath.org/f
openid.client.id=tesuto_api
openid.client.secret=2b4af75b-a77b-45cf-baee-e316ac2f6eb6
#openid.client.secret=AI_OL8EGr5HRN3Bl0DkJu3wTHo1bIQH76vB7FE3NxARtn9yEVixEc6ImAI-1Mp05pm5DjOPCo_9cQg2D22Gy81E
idp.eppnservice.url=${openid.base.endpoint}


OAUTH_CLIENT_ID=${oauth.clientId}
OAUTH_CLIENT_SECRET=${oauth.clientSecret}
OAUTH_LAYOUT_URL=${oauth.base.url}

# Open ID settings-->
openid.base.endpoint=${oauth.base.url}
openid.jwk.endpoint=${oauth.base.url}/jwk
openid.client.id=${oauth.clientId}
openid.client.secret=${oauth.clientSecret}
idp.eppnservice.url=${openid.base.endpoint}

# Simply change the URL to connect to a real AWS queue and comment out the embedded server in the integration-config.xml
queue.url=https://sqs.us-west-2.amazonaws.com/035922915890/assess-ci-POC
wait.time=5
sleep.time.seconds=5

placement.notification.queue=dummy
placement.notification.send=false

messages.region.name=us-west-2

aws.messages.endpoint=https://sqs.us-west-2.amazonaws.com/
aws.assessment.complete.notification.queue.url=https://sqs.us-west-2.amazonaws.com/035922915890/assess-ci-POC
embedded.assessment.complete.notification.queue.url=http://localhost:9324/queue/assessment-complete
assessment.complete.notification.queue.name=assessment-complete

aws.multiple.measure.request.queue.url=https://sqs.us-west-2.amazonaws.com/035922915890/assess-ci-POC
embedded.multiple.measure.request.queue.url=http://localhost:9324/queue/multiple-measure-requested
multiple.measure.request.queue.name=multiple-measure-requested

embedded.messages.endpoint=http://localhost:9324
assessment.complete.notification.send=true

ui.service.base.url=https://localhost:8443/service/
placement.service.base.url=https://localhost:8443/placement-service/service/
tesuto.login.url==https://localhost:8443/login

# Header values from the load balancer or router
http.originating.protocol=x-forwarded-proto
http.originating.client.port=x-forwarded-port

full.branch.rule.evaluation=false

#seed.data.generate when true when generate a new set of static json files and replace the old set of files.� Generation is based on current state of the local databases. Modules which use seed.data.generate :Users, Plcaements,Rules.
seed.data.generate=false
#seed.data.store when true will populate the databases with the current set of static text json files
seed.data.store=false
#seed.data.password.generate� will generate a complete new set of passwords for local users. Passwords will have at least one of each lower case, upper case, number and symbol and 16 characters in the string.
seed.data.password.generate=false
#seed.data.password.use.default when this is set to true all generated passwords will be password. Should only be true when generating a set of passwords for local users.
seed.data.password.use.default = true
#seed.data.zip.password this will be the password used to decrypt the encrypted zip file that contains a list of usernames and passwords
seed.data.zip.password=n3v3rG0!!aG!v3Y0uU9

report.test.student=REPORT_TEST_STUDENT

#aws.assessment.complete.notification.queue.url=https://sqs.us-west-2.amazonaws.com/035922915890/assess-ci-POC
SEED_DATA_ASSESSMENT_COMPLETE_NOTIFICATION_QUEUE_URL=http://localhost:9324/queue/assessment-complete
SEED_DATA_MULTIPLE_MEASURE_REQUEST_NOTIFICATION_QUEUE_URL=http://localhost:9324/queue/multiple-measure-requested
seed.data.math.competency.map.uri=src/test/resources/seed_documents/MathComps_v4_090917.zip
seed.data.esl.competency.map.uri=src/test/resources/seed_documents/ESLComps_v5_092517.zip
seed.data.english.competency.map.uri=src/test/resources/seed_documents/EnglishComps_v4_090917.zip


# Email Configuration & Credentials
email.service.url=https://gateway.ci.cccmypath.org/ccc/api/messages/v1/sendEmail
email.oauth.url=https://gateway.ci.cccmypath.org/security/oauth/token
email.oauth.user=acme
email.oauth.password=acmesecret



class.importer.validate.studentname=false

# Remote web service endpoints.
tesuto.service.host=localhost
tesuto.service.scheme=http
activation.http.port=8081
activation.server.port=8441
activation.server.context=activation-service

admin.http.port=8082
admin.server.port=8442
admin.server.context=admin-service

content.http.port=8084
content.server.port=8444
content.server.context=content-service

delivery.http.port=8185
delivery.server.port=8445
delivery.server.context=delivery-service

ui.http.port=8092
ui.server.port=8452
ui.server.context=

placement.http.port=8086
placement.server.port=8446
placement.server.context=placement-service

rules.http.port=8090
rules.server.port=8450
rules.server.context=rules-service


cloud.aws.env=junkyard

